git clone https://github.com/AshwaniKRawat/springbootwebapp.git
cd springbootwebapp
mvn clean compile package


====================================================================
docker hub
====================================================================

docker images
docker system prune -a
docker build -t springbootrestservicedockerapp .
docker images
docker run -d -p 9091:8080 springbootrestservicedockerapp
# Stop the container
docker stop <container-id>
docker ps


====================================================================
pushing image into docker hub
====================================================================

# login into docker hub account from docker machine
$ docker login

Note: Enter your docker hub account credentials.
	
# tag docker image
docker tag <image-name> <tagname>
docker tag springbootrestservicedockerapp ashwanirawat/springbootrestservicedockerapp


# Push Docker image
docker push ashwanirawat/springbootrestservicedockerapp

pull from docker 
docker pull <imagename>
docker pull ashwanirawat/springbootrestservicedockerapp




====================================================================
Kubernetes
====================================================================
----------------------------------------------------------------------------------Approach 1:-----------------------------------------------------------------------------
# Delete all k8s components we have created 
$ kubectl delete all --all

-------------
POD creation
-------------

---
apiVersion: v1
kind: Pod
metadata:
  name: javawebapppod
  labels:
    app: javawebapp
spec:
   containers:
   - name: javawebappcontainer
     image: ashwani/javawebapp
     ports:
      - containerPort: 8080
...


file Name:  javawebapppod.yml

============
K8S Service
============

---
apiVersion: v1
kind: Pod
metadata:
  name: javawebapppod
  labels:
    app: javawebapp
spec:
   containers:
   - name: javawebappcontainer
     image: ashwanirawat/springbootrestservicedockerapp
     ports:
      - containerPort: 8080
...

file Name: javawebappsvc.yml

kubectl get pods

# Create PODS using pod-manifest
$ kubectl apply -f <pod-yml>
kubectl apply -f javawebapppod.yml

# Create service using service-manifest
kubectl apply -f javawebappsvc.yml

kubectl get pods
NAME            READY   STATUS    RESTARTS   AGE
javawebapppod   1/1     Running   0          2m15s

kubectl get svc
NAME            TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
javawebappsvc   NodePort    10.100.3.87   <none>        80:30028/TCP   3m10s

# Check POD running in which Node
$ kubectl get pods -o wide

NAME            READY   STATUS    RESTARTS   AGE   IP               NODE                                            NOMINATED NODE   READINESS GATES
javawebapppod   1/1     Running   0          16s   192.168.53.157   ip-192-168-43-195.ap-south-1.compute.internal   <none>           <none>


# Descrie pod ( get more info about pod)
$ kubectl describe pod <pod-name>
kubectl describe pod javawebapppod

============
K8S Service
============

=> Kubernetes service is used to expose PODS outside cluster

=> We have 3 types of K8S Services

1) Cluster IP
2) Node Port
3) Load Balancer
--------------------------------------------------------------------------------Approach 2:----------------------------------------------------------------------

---------------------------------------------------------------------------------Node Port----------------------------------------------------------------------

Now using Node Port

---
apiVersion: v1
kind: Service
metadata:
 name: javawebappsvc
spec:
  type: NodePort
  selector:
    app: javawebapp # POD lable
  ports:
  - port: 80
    targetPort: 8080
...

# Create PODS using pod-manifest
$ kubectl apply -f <pod-yml>
kubectl apply -f javawebapppod.yml

# Create service using service-manifest
kubectl apply -f javawebappsvc.yml

Now 
Note: We can see service information and Node Port Number assigned by K8S.

ubuntu@ip-172-31-42-99:~/ASH/POD$ kubectl get svc
NAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
javawebappsvc   NodePort    10.100.135.64   <none>        80:31187/TCP   102s
kubernetes      ClusterIP   10.100.0.1      <none>        443/TCP        5m33s

Note: Enable Node Port number in security group of Worker node in which our POD is running.

--------------------------------------------------------------------------------Approach 3:----------------------------------------------------------------------

---------------------------------------------------------------------------------Cluster IP----------------------------------------------------------------------
